maven
1.a build automation tool used primarily for Java projects
2. to build and manage projects

Spring Framework is a powerful, open-source framework for Java, widely used for building
enterprise applications. It provides comprehensive infrastructure support for developing
Java applications and is known for its flexibility and ease of integration with various
technologies.

Core Features of Spring Framework

    Dependency Injection (DI) – Manages object dependencies and promotes loose coupling.
    Aspect-Oriented Programming (AOP) – Separates cross-cutting concerns like logging and security.
    Spring MVC – A framework for building web applications.
    Spring Boot – Simplifies Spring development with auto-configuration and embedded servers.
    Spring Data – Simplifies database interactions, including JPA, MongoDB, and Redis.
    Spring Security – Provides authentication, authorization, and protection against common security threats.
    Spring Cloud – Helps in building distributed microservices architectures.
    Spring Batch – Supports batch processing for large-scale data operations.
    Spring WebFlux – Reactive programming support for handling asynchronous data streams.

Common Spring Framework Modules

    Spring Core (Dependency Injection, Bean Management)
    Spring MVC (Web applications, REST APIs)
    Spring Boot (Microservices, Embedded Servers)
    Spring Security (Authentication & Authorization)
    Spring Data JPA (Database interactions)
    Spring Cloud (Microservices orchestration)

HTTP METHODS
1. GET
	Used to retrieve data from a server
	It is idempotent (multiple identical requests produce the same result).
2. POST
	Used to create a new resource.
	Not idempotent (multiple requests may create duplicate resources).
3. PUT
    Used to update an existing resource or create it if it does not exist.
    It is idempotent (repeated requests with the same data result in the same state).
4. DELETE
    Used to delete a resource.
    It is idempotent (deleting the same resource multiple times results in the same state).
5. PATCH
    Used to partially update a resource.
    Unlike PUT, which replaces the entire resource, PATCH updates only the specified fields.
6. HEAD
    Similar to GET, but it only returns the headers (no response body).
    Useful for checking if a resource exists before making a GET request.
7. OPTIONS
    Returns the allowed HTTP methods for a given resource.
    Useful for CORS (Cross-Origin Resource Sharing).
8. TRACE
    Used for debugging. It echoes back the received request.
9. CONNECT
    Used to establish a tunnel (e.g., for HTTPS proxy connections).

Problems with Servlets and JSP (why frameworks are needed)
1. Too much boilerplate code
        Writing Servlets requires handling request/response, session management, and exception handling manually.
    Developers must manually parse request parameters and generate dynamic responses.
2. Mixing Business Logic with Presentation
		JSP allows Java code inside HTML using scriptlets (<% %>), leading to spaghetti code.
    Business logic inside JSP violates the Separation of Concerns (SoC) principle.
3. Lack of Built-in MVC Architecture
		Servlets and JSP do not enforce separation of concerns (Model, View, Controller).
    Manually managing routing and request processing is difficult.
4.
5. Poor Scalability
		Every request creates a new thread, consuming more resources.
    Developers must manually implement connection pooling and optimize performance.
6. Manual Configuration
		Servlets require web.xml configuration for mapping URLs to servlets.
    Configuration changes require server restarts.
7. Security Challenges
		Developers must manually implement user authentication and authorization.
    Protection against SQL Injection, CSRF, and XSS requires additional coding.
8. Testing and Maintenance Issues
		Servlets depend on HttpServletRequest and HttpServletResponse, making unit testing hard.
	Requires mocking request/response for testing.